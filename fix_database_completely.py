import sqlite3
import os
from datetime import datetime

def fix_database_completely():
    print("๐ง ุฅุตูุงุญ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุงููุงูู...")
    
    # ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ ุฅุฐุง ูุงูุช ููุฌูุฏุฉ
    if os.path.exists('car_management.db'):
        os.remove('car_management.db')
        print("๐๏ธ ุชู ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ")
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ
    conn = sqlite3.connect('car_management.db')
    cursor = conn.cursor()
    
    try:
        print("๐ ุฅูุดุงุก ุงูุฌุฏุงูู...")
        
        # ุฌุฏูู ุงููุณุชุฎุฏููู
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                email TEXT,
                role TEXT DEFAULT 'admin',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ุฌุฏูู ุงูููุธููู
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS employees (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_number TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                position TEXT,
                department TEXT,
                salary REAL,
                hire_date TEXT,
                phone TEXT,
                email TEXT,
                address TEXT,
                status TEXT DEFAULT 'ูุดุท' CHECK (status IN ('ูุดุท', 'ุบูุฑ ูุดุท', 'ููุตูู')),
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ุฌุฏูู ุงูุณูุงุฑุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cars (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                brand TEXT NOT NULL,
                model TEXT NOT NULL,
                year INTEGER NOT NULL,
                license_plate TEXT UNIQUE NOT NULL,
                color TEXT,
                fuel_type TEXT DEFAULT 'ุจูุฒูู',
                status TEXT DEFAULT 'ูุชุงุญ' CHECK (status IN ('ูุชุงุญ', 'ูุณุชุฃุฌุฑ', 'ุตูุงูุฉ', 'ุบูุฑ ูุชุงุญ')),
                purchase_date TEXT,
                purchase_price REAL,
                current_value REAL,
                engine_number TEXT,
                chassis_number TEXT,
                responsible_employee_id INTEGER,
                insurance_expiry TEXT,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (responsible_employee_id) REFERENCES employees (id)
            )
        ''')
        
        # ุฌุฏูู ุงููุตุฑููุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                expense_type TEXT NOT NULL,
                category TEXT NOT NULL,
                subcategory TEXT,
                amount REAL NOT NULL,
                description TEXT,
                receipt_number TEXT,
                date TEXT NOT NULL,
                related_car_id INTEGER,
                related_employee_id INTEGER,
                approved_by TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (related_car_id) REFERENCES cars (id),
                FOREIGN KEY (related_employee_id) REFERENCES employees (id)
            )
        ''')
        
        # ุฌุฏูู ุงูุฎุฒููุฉ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS treasury (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT NOT NULL CHECK (type IN ('ุฅูุฏุงุน', 'ุณุญุจ')),
                amount REAL NOT NULL,
                description TEXT,
                reference_number TEXT,
                date TEXT NOT NULL,
                balance REAL NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ุฌุฏูู ุนูุฏ ุงูุณูุงุฑุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS car_custody (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id INTEGER NOT NULL,
                employee_number TEXT NOT NULL,
                car_id INTEGER NOT NULL,
                custody_date TEXT NOT NULL,
                expected_return TEXT,
                return_date TEXT,
                notes TEXT,
                return_notes TEXT,
                status TEXT DEFAULT 'ูุดุท' CHECK (status IN ('ูุดุท', 'ููุณูู')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (employee_id) REFERENCES employees (id),
                FOREIGN KEY (car_id) REFERENCES cars (id)
            )
        ''')
        
        # ุฌุฏูู ุจูุงูุงุช ุงููุทูุฑ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS developer_info (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name_ar TEXT NOT NULL,
                name_en TEXT NOT NULL,
                email TEXT NOT NULL,
                phone TEXT NOT NULL,
                company TEXT,
                website TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        print("โ ุชู ุฅูุดุงุก ุฌููุน ุงูุฌุฏุงูู")
        
        # ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ
        print("๐ ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ...")
        
        # ูุณุชุฎุฏู ุงูุชุฑุงุถู
        cursor.execute('''
            INSERT INTO users (username, password, email, role)
            VALUES (?, ?, ?, ?)
        ''', ('admin', 'admin123', 'admin@system.com', 'admin'))
        
        # ููุธููู ุงูุชุฑุงุถููู
        employees_data = [
            ('EMP001', 'ุฃุญูุฏ ูุญูุฏ ุนูู', 'ูุฏูุฑ ุนุงู', 'ุงูุฅุฏุงุฑุฉ', 8000.0, '2024-01-01', '0501234567', 'ahmed@company.com', 'ุงูุฑูุงุถ', 'ูุดุท', 'ููุธู ูุชููุฒ'),
            ('EMP002', 'ูุงุทูุฉ ุฃุญูุฏ', 'ูุญุงุณุจุฉ', 'ุงููุงููุฉ', 6000.0, '2024-01-15', '0507654321', 'fatima@company.com', 'ุฌุฏุฉ', 'ูุดุท', 'ุฎุจุฑุฉ ูู ุงููุญุงุณุจุฉ'),
            ('EMP003', 'ูุญูุฏ ุณุงูู', 'ุณุงุฆู', 'ุงูููู', 4000.0, '2024-02-01', '0509876543', 'mohammed@company.com', 'ุงูุฏูุงู', 'ูุดุท', 'ุณุงุฆู ูุญุชุฑู')
        ]
        
        for emp in employees_data:
            cursor.execute('''
                INSERT INTO employees (employee_number, name, position, department, salary, hire_date, phone, email, address, status, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', emp)
        
        # ุณูุงุฑุงุช ุงูุชุฑุงุถูุฉ
        cars_data = [
            ('ุชูููุชุง', 'ูุงูุฑู', 2023, 'ุฃ ุจ ุฌ 123', 'ุฃุจูุถ', 'ุจูุฒูู', 'ูุชุงุญ', '2024-01-01', 85000.0, 80000.0, 'ENG123456', 'CHS789012', 1, '2025-12-31', 'ุณูุงุฑุฉ ุฌุฏูุฏุฉ'),
            ('ูููุฏุงู', 'ุงููุชุฑุง', 2022, 'ุฏ ูู ู 456', 'ุฃุณูุฏ', 'ุจูุฒูู', 'ูุชุงุญ', '2024-01-15', 75000.0, 70000.0, 'ENG654321', 'CHS210987', 2, '2025-11-30', 'ุญุงูุฉ ููุชุงุฒุฉ'),
            ('ููุณุงู', 'ุงูุชููุง', 2023, 'ุฒ ุญ ุท 789', 'ูุถู', 'ุจูุฒูู', 'ูุชุงุญ', '2024-02-01', 90000.0, 85000.0, 'ENG987654', 'CHS456789', 3, '2026-01-31', 'ุณูุงุฑุฉ VIP')
        ]
        
        for car in cars_data:
            cursor.execute('''
                INSERT INTO cars (brand, model, year, license_plate, color, fuel_type, status, purchase_date, purchase_price, current_value, engine_number, chassis_number, responsible_employee_id, insurance_expiry, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', car)
        
        # ุฑุตูุฏ ุงูุชุฑุงุถู ููุฎุฒููุฉ
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            INSERT INTO treasury (type, amount, description, reference_number, date, balance)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', ('ุฅูุฏุงุน', 50000.0, 'ุฑุตูุฏ ุงูุชุฑุงุถู ูุจุฏุก ุงููุธุงู', 'INIT-001', today, 50000.0))
        
        # ูุตุฑููุงุช ุงูุชุฑุงุถูุฉ
        expenses_data = [
            ('ุชุดุบููู', 'ูููุฏ', 500.0, 'ุชุนุจุฆุฉ ูููุฏ ููุณูุงุฑุงุช', 'REC001', today, 1, 1, 'admin'),
            ('ุตูุงูุฉ', 'ุตูุงูุฉ ุฏูุฑูุฉ', 800.0, 'ุชุบููุฑ ุฒูุช ูููุงุชุฑ', 'REC002', today, 2, 2, 'admin'),
            ('ุฅุฏุงุฑู', 'ููุชุจูุฉ', 200.0, 'ุฃุฏูุงุช ููุชุจูุฉ', 'REC003', today, None, None, 'admin')
        ]
        
        for exp in expenses_data:
            cursor.execute('''
                INSERT INTO expenses (expense_type, category, amount, description, receipt_number, date, related_car_id, related_employee_id, approved_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', exp)
        
        # ุจูุงูุงุช ุงููุทูุฑ
        cursor.execute('''
            INSERT INTO developer_info (name_ar, name_en, email, phone, company, website)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', ('ูุญูุฏ ูุจุฑูู ุนุทูุฉ', 'Mohamed Marouk Atia', 'mohamedmarouk55@gmail.com', '+966570453337', 'Freelance Developer', 'https://github.com/mohamedmarouk'))
        
        conn.commit()
        print("โ ุชู ุฅุฏุฑุงุฌ ุฌููุน ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ")
        
        # ุนุฑุถ ููุฎุต ูุงุนุฏุฉ ุงูุจูุงูุงุช
        print("\n๐ ููุฎุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ:")
        
        tables = ['users', 'employees', 'cars', 'expenses', 'treasury', 'car_custody', 'developer_info']
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  ๐ {table}: {count} ุณุฌู")
        
        # ุงูุชุญูู ูู ุนููุฏ type ูู ุฌุฏูู treasury
        cursor.execute("PRAGMA table_info(treasury)")
        treasury_columns = cursor.fetchall()
        type_column_exists = any(col[1] == 'type' for col in treasury_columns)
        
        if type_column_exists:
            print("\nโ ุนููุฏ 'type' ููุฌูุฏ ูู ุฌุฏูู treasury")
            
            # ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงู
            cursor.execute('SELECT COALESCE(SUM(amount), 0) FROM treasury WHERE type = "ุฅูุฏุงุน"')
            income = cursor.fetchone()[0]
            print(f"โ ุงุฎุชุจุงุฑ ุงุณุชุนูุงู ุงูุฅูุฏุงุนุงุช: {income}")
            
            cursor.execute('SELECT COALESCE(SUM(amount), 0) FROM treasury WHERE type = "ุณุญุจ"')
            expenses = cursor.fetchone()[0]
            print(f"โ ุงุฎุชุจุงุฑ ุงุณุชุนูุงู ุงูุณุญูุจุงุช: {expenses}")
        else:
            print("\nโ ุนููุฏ 'type' ุบูุฑ ููุฌูุฏ!")
        
        print("\n๐ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        print("๐ค ุงุณู ุงููุณุชุฎุฏู: admin")
        print("๐ ูููุฉ ุงููุฑูุฑ: admin123")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    fix_database_completely()